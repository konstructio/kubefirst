version: '3'

tasks:
  unit-test:
    - go test -v -short ./...
  unit-test-with-report:
    - go test -v ./... -coverpkg=./... -coverprofile cover.out
    - go tool cover -html cover.out -o coverage.html
  integration-tests:
    - go run . init --profile default --cloud aws --region $AWS_REGION --aws-nodes-spot --cluster-name $CLUSTER_NAME --s3-suffix $SUFFIX_S3 --admin-email $EMAIL --hosted-zone-name $HOSTED_ZONE_NAME --gitops-branch $GITOPS_BRANCH --silent || echo $?
    - go test -v -run TestAreS3BucketsLiveIntegration ./internal/aws || echo $?
    - go run . cluster create --silent || echo $?
    - go test -v -run TestArgoCDLivenessIntegration ./internal/argocd || echo $?
    - go test -v -run TestArgoWorkflowLivenessIntegration ./internal/argocd || echo $?
    - go test -v -run TestGitLabLivenessIntegration ./internal/gitlab || echo $?
    - go test -v -run TestMetaphorsLivenessIntegration ./internal/metaphor || echo $?
    - go run . destroy --silent || echo $?
    - go test -v -run TestIsVPCByTagDestroyedIntegration ./internal/aws || echo $?
    - go test -v -run TestIsLoadBalancerByTagDestroyedIntegration ./internal/aws || echo $?
    - go test -v -run TestAreS3BucketsDestroyedIntegration ./internal/aws || echo $?
    - go test -v -run TestIsKMSKeyAliasDestroyedIntegration ./internal/aws || echo $?
    - go test -v -run TestIsEKSDestroyedIntegration ./internal/aws || echo $?
    - go run . clean --destroy-buckets --destroy-confirm || echo $?
    - aws s3 sync $HOME/kubefirst/logs s3://$CICD_LOGS_BUCKET
  integration-test-for-tls-localdev:
    - go test -v -run TestArgoCertificateIntegration ./internal/ssl -count=1
  e2e-test-local-metaphors:
    - go test -v -run TestLocalMetaphorFrontendEndToEnd ./tests -count=1
  e2e-test-cloud-metaphors:
    - go test -v -run TestCloudMetaphorsEndToEnd ./tests -count=1
  e2e-test-github-user-creation-and-login:
    # creates GitHub user
    - go test -v -run TestGitHubUserCreationEndToEnd ./tests -count=1
    # before checking if user exists, we need to wait for Atlantis apply to finish
    - sleep 10
    # check is the created user can log in into Vault
    # this test requires E2E_VAULT_USERNAME to be set (aone, or kbot)
    - go test -v -run TestVaultLoginEndToEnd ./tests -count=1
